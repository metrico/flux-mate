"use strict";(self.webpackChunkFluxMate=self.webpackChunkFluxMate||[]).push([[592],{738:()=>{function h(s,u,i,n,a,t,e){try{var r=s[t](e),o=r.value}catch(c){return void i(c)}r.done?u(o):Promise.resolve(o).then(n,a)}class f{post(u,i,n=[]){return function p(s){return function(){var u=this,i=arguments;return new Promise(function(n,a){var t=s.apply(u,i);function e(o){h(t,n,a,e,r,"next",o)}function r(o){h(t,n,a,e,r,"throw",o)}e(void 0)})}}(function*(){return new Promise((a,t)=>{try{let e=new XMLHttpRequest;e.open("POST",u,!0),n.length>0&&n.forEach(r=>{Object.entries(r).forEach(([o,c])=>{e.setRequestHeader(o,c)})}),e.send(i),e.onerror=r=>{t(e)},e.onabort=r=>{t(e)},e.ontimeout=r=>{t(e)},e.onload=r=>{200===e.status?a(e):t(e)}}catch(e){console.error({error:e})}})})()}}addEventListener("message",({data:s})=>{try{s=JSON.parse(s)}catch(t){}const u=new f,{url:i,query:n,headers:a}=s;u.post(i,n,a||[]).then(t=>{postMessage(t.response)},t=>{postMessage(JSON.stringify({isError:!0,message:t.responseText}))})})}}]);